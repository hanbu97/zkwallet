#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::wallet::mnemonics::PolkadotAddress;

// Section: wire functions

fn wire_platform_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Platform, _>(
        WrapInfo {
            debug_name: "platform",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(platform()),
    )
}
fn wire_rust_release_mode_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "rust_release_mode",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(rust_release_mode()),
    )
}
fn wire_multiply_zk_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (String, String), _>(
        WrapInfo {
            debug_name: "multiply_zk",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Result::<_, ()>::Ok(multiply_zk(api_a, api_b))
        },
    )
}
fn wire_generate_wallet_impl(
    port_: MessagePort,
    ss58: impl Wire2Api<u16> + UnwindSafe,
    password: impl Wire2Api<Option<String>> + UnwindSafe,
    length: impl Wire2Api<u8> + UnwindSafe,
    lang: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, PolkadotAddress, _>(
        WrapInfo {
            debug_name: "generate_wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ss58 = ss58.wire2api();
            let api_password = password.wire2api();
            let api_length = length.wire2api();
            let api_lang = lang.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(generate_wallet(
                    api_ss58,
                    api_password,
                    api_length,
                    api_lang,
                ))
            }
        },
    )
}
fn wire_generate_wallet_from_mnemonics_impl(
    port_: MessagePort,
    ss58: impl Wire2Api<u16> + UnwindSafe,
    password: impl Wire2Api<Option<String>> + UnwindSafe,
    phrase: impl Wire2Api<String> + UnwindSafe,
    lang: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, PolkadotAddress, _>(
        WrapInfo {
            debug_name: "generate_wallet_from_mnemonics",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ss58 = ss58.wire2api();
            let api_password = password.wire2api();
            let api_phrase = phrase.wire2api();
            let api_lang = lang.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(generate_wallet_from_mnemonics(
                    api_ss58,
                    api_password,
                    api_phrase,
                    api_lang,
                ))
            }
        },
    )
}
fn wire_word_suggestion_impl(
    port_: MessagePort,
    word: impl Wire2Api<String> + UnwindSafe,
    lang: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>, _>(
        WrapInfo {
            debug_name: "word_suggestion",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_word = word.wire2api();
            let api_lang = lang.wire2api();
            move |task_callback| Result::<_, ()>::Ok(word_suggestion(api_word, api_lang))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Platform {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => 0,
            Self::Android => 1,
            Self::Ios => 2,
            Self::Windows => 3,
            Self::Unix => 4,
            Self::MacIntel => 5,
            Self::MacApple => 6,
            Self::Wasm => 7,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Platform {}
impl rust2dart::IntoIntoDart<Platform> for Platform {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PolkadotAddress {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.mnemonic_phrase.into_into_dart().into_dart(),
            self.mini_secret_key.into_into_dart().into_dart(),
            self.public_key.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PolkadotAddress {}
impl rust2dart::IntoIntoDart<PolkadotAddress> for PolkadotAddress {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
