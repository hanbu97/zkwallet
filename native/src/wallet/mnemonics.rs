use bip39::{Language, Mnemonic, MnemonicType};
use data_encoding::HEXLOWER;
use sp_core;
use sp_core::crypto::Ss58Codec;
use sp_core::Pair;

#[derive(Debug)]
pub struct PolkadotAddress {
    pub mnemonic_phrase: String,
    pub mini_secret_key: String,
    pub public_key: String,
    pub address: String,
}

fn generate_wallet_inner(
    ss58: u16,
    password: Option<String>,
    mnemonic: Mnemonic,
    phrase: &str,
) -> PolkadotAddress {
    let (pair, seed) = match password {
        Some(p) => sp_core::sr25519::Pair::from_phrase_mnemonic(mnemonic.clone(), Some(&p))
            .expect("All phrases generated by Mnemonic are valid; qed"),
        None => sp_core::sr25519::Pair::from_phrase_mnemonic(mnemonic.clone(), None)
            .expect("All phrases generated by Mnemonic are valid; qed"),
    };

    let address = sp_core::crypto::AccountId32::from(pair.public())
        .to_ss58check_with_version(sp_core::crypto::Ss58AddressFormat::custom(ss58.into()));

    let data = PolkadotAddress {
        mnemonic_phrase: phrase.to_owned(),
        mini_secret_key: HEXLOWER.encode(&seed),
        public_key: HEXLOWER.encode(&<[u8; 32]>::from(pair.public())),
        address,
    };

    data
}

pub fn generate_wallet(
    ss58: u16,
    password: Option<String>,
    length: MnemonicType,
    lang: Language,
) -> PolkadotAddress {
    let mnemonic = Mnemonic::new(length, lang);
    generate_wallet_inner(ss58, password, mnemonic.clone(), mnemonic.phrase())
}

pub fn generate_wallet_from_mnemonics(
    ss58: u16,
    password: Option<String>,
    phrase: &str,
    lang: Language,
) -> PolkadotAddress {
    let mnemonic = Mnemonic::from_phrase(phrase, lang).unwrap();
    generate_wallet_inner(ss58, password, mnemonic.clone(), phrase)
}

pub fn word_suggestion(word: &str, lang: Language) -> Vec<String> {
    let wordlist = lang.wordlist();
    let suggestions = wordlist.get_words_by_prefix(word);
    let suggestions = suggestions
        .iter()
        .map(|s| s.to_string())
        .collect::<Vec<String>>();
    suggestions
}
