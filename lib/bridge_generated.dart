// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<Platform> platform({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_platform(port_),
      parseSuccessData: _wire2api_platform,
      parseErrorData: null,
      constMeta: kPlatformConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "platform",
        argNames: [],
      );

  Future<bool> rustReleaseMode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_release_mode(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kRustReleaseModeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_release_mode",
        argNames: [],
      );

  Future<(String, String)> multiplyZk(
      {required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_multiply_zk(port_, arg0, arg1),
      parseSuccessData: _wire2api___record__String_String,
      parseErrorData: null,
      constMeta: kMultiplyZkConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMultiplyZkConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "multiply_zk",
        argNames: ["a", "b"],
      );

  Future<WalletAddress> generateWalletMulti(
      {String? password,
      required int length,
      required String lang,
      required String params,
      required String chain,
      dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(password);
    var arg1 = api2wire_u8(length);
    var arg2 = _platform.api2wire_String(lang);
    var arg3 = _platform.api2wire_String(params);
    var arg4 = _platform.api2wire_String(chain);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_generate_wallet_multi(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_wallet_address,
      parseErrorData: null,
      constMeta: kGenerateWalletMultiConstMeta,
      argValues: [password, length, lang, params, chain],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateWalletMultiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_wallet_multi",
        argNames: ["password", "length", "lang", "params", "chain"],
      );

  Future<PolkadotAddress> generateWallet(
      {required int ss58,
      String? password,
      required int length,
      required String lang,
      dynamic hint}) {
    var arg0 = api2wire_u16(ss58);
    var arg1 = _platform.api2wire_opt_String(password);
    var arg2 = api2wire_u8(length);
    var arg3 = _platform.api2wire_String(lang);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_generate_wallet(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_polkadot_address,
      parseErrorData: null,
      constMeta: kGenerateWalletConstMeta,
      argValues: [ss58, password, length, lang],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_wallet",
        argNames: ["ss58", "password", "length", "lang"],
      );

  Future<WalletAddress> generateWalletFromMnemonicsMulti(
      {required String chain,
      String? password,
      required String phrase,
      required String lang,
      required String params,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(chain);
    var arg1 = _platform.api2wire_opt_String(password);
    var arg2 = _platform.api2wire_String(phrase);
    var arg3 = _platform.api2wire_String(lang);
    var arg4 = _platform.api2wire_String(params);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_generate_wallet_from_mnemonics_multi(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_wallet_address,
      parseErrorData: null,
      constMeta: kGenerateWalletFromMnemonicsMultiConstMeta,
      argValues: [chain, password, phrase, lang, params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGenerateWalletFromMnemonicsMultiConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "generate_wallet_from_mnemonics_multi",
            argNames: ["chain", "password", "phrase", "lang", "params"],
          );

  Future<PolkadotAddress> generateWalletFromMnemonics(
      {required int ss58,
      String? password,
      required String phrase,
      required String lang,
      dynamic hint}) {
    var arg0 = api2wire_u16(ss58);
    var arg1 = _platform.api2wire_opt_String(password);
    var arg2 = _platform.api2wire_String(phrase);
    var arg3 = _platform.api2wire_String(lang);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_generate_wallet_from_mnemonics(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_polkadot_address,
      parseErrorData: null,
      constMeta: kGenerateWalletFromMnemonicsConstMeta,
      argValues: [ss58, password, phrase, lang],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateWalletFromMnemonicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_wallet_from_mnemonics",
        argNames: ["ss58", "password", "phrase", "lang"],
      );

  Future<List<String>> wordSuggestion(
      {required String word, required String lang, dynamic hint}) {
    var arg0 = _platform.api2wire_String(word);
    var arg1 = _platform.api2wire_String(lang);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_word_suggestion(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: null,
      constMeta: kWordSuggestionConstMeta,
      argValues: [word, lang],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWordSuggestionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "word_suggestion",
        argNames: ["word", "lang"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  (String, String) _wire2api___record__String_String(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_String(arr[0]),
      _wire2api_String(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  Platform _wire2api_platform(dynamic raw) {
    return Platform.values[raw as int];
  }

  PolkadotAddress _wire2api_polkadot_address(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PolkadotAddress(
      mnemonicPhrase: _wire2api_String(arr[0]),
      miniSecretKey: _wire2api_String(arr[1]),
      publicKey: _wire2api_String(arr[2]),
      address: _wire2api_String(arr[3]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  WalletAddress _wire2api_wallet_address(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletAddress(
      mnemonicPhrase: _wire2api_String(arr[0]),
      secretKey: _wire2api_String(arr[1]),
      address: _wire2api_String(arr[2]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_platform');
  late final _wire_platform =
      _wire_platformPtr.asFunction<void Function(int)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_release_mode');
  late final _wire_rust_release_mode =
      _wire_rust_release_modePtr.asFunction<void Function(int)>();

  void wire_multiply_zk(
    int port_,
    int a,
    int b,
  ) {
    return _wire_multiply_zk(
      port_,
      a,
      b,
    );
  }

  late final _wire_multiply_zkPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>(
      'wire_multiply_zk');
  late final _wire_multiply_zk =
      _wire_multiply_zkPtr.asFunction<void Function(int, int, int)>();

  void wire_generate_wallet_multi(
    int port_,
    ffi.Pointer<wire_uint_8_list> password,
    int length,
    ffi.Pointer<wire_uint_8_list> lang,
    ffi.Pointer<wire_uint_8_list> params,
    ffi.Pointer<wire_uint_8_list> chain,
  ) {
    return _wire_generate_wallet_multi(
      port_,
      password,
      length,
      lang,
      params,
      chain,
    );
  }

  late final _wire_generate_wallet_multiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_generate_wallet_multi');
  late final _wire_generate_wallet_multi =
      _wire_generate_wallet_multiPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_wallet(
    int port_,
    int ss58,
    ffi.Pointer<wire_uint_8_list> password,
    int length,
    ffi.Pointer<wire_uint_8_list> lang,
  ) {
    return _wire_generate_wallet(
      port_,
      ss58,
      password,
      length,
      lang,
    );
  }

  late final _wire_generate_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint16,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8,
              ffi.Pointer<wire_uint_8_list>)>>('wire_generate_wallet');
  late final _wire_generate_wallet = _wire_generate_walletPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_wallet_from_mnemonics_multi(
    int port_,
    ffi.Pointer<wire_uint_8_list> chain,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> phrase,
    ffi.Pointer<wire_uint_8_list> lang,
    ffi.Pointer<wire_uint_8_list> params,
  ) {
    return _wire_generate_wallet_from_mnemonics_multi(
      port_,
      chain,
      password,
      phrase,
      lang,
      params,
    );
  }

  late final _wire_generate_wallet_from_mnemonics_multiPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_generate_wallet_from_mnemonics_multi');
  late final _wire_generate_wallet_from_mnemonics_multi =
      _wire_generate_wallet_from_mnemonics_multiPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_wallet_from_mnemonics(
    int port_,
    int ss58,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> phrase,
    ffi.Pointer<wire_uint_8_list> lang,
  ) {
    return _wire_generate_wallet_from_mnemonics(
      port_,
      ss58,
      password,
      phrase,
      lang,
    );
  }

  late final _wire_generate_wallet_from_mnemonicsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Uint16,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_generate_wallet_from_mnemonics');
  late final _wire_generate_wallet_from_mnemonics =
      _wire_generate_wallet_from_mnemonicsPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_word_suggestion(
    int port_,
    ffi.Pointer<wire_uint_8_list> word,
    ffi.Pointer<wire_uint_8_list> lang,
  ) {
    return _wire_word_suggestion(
      port_,
      word,
      lang,
    );
  }

  late final _wire_word_suggestionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_word_suggestion');
  late final _wire_word_suggestion = _wire_word_suggestionPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
